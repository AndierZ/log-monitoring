Producer apps.consumer model
	-	Multiple producers
	-	Multiple consumers with leader election? One primary instance + multiple secondary instances
	-	Binary message over tcp using flat but?
	-	Core library for evaluating log message
	-	Core library for keeping track of stats
	-	Unit tests
	-	Readme and docs


Steps

Define the data model for inputs and outputs
Write producers, generate inputs, send over TCP
	read config to figure out which host:port to connect to
	Define a historical apps.producer which provide a context and timer
Write apps.consumer, apps.consumer inputs over TCP, send to a output sink (write to console log)
	take list of producers to expect
Introduce config to specify how these components should be instantiated
They should be one instance per thread. and know how to connect to each other

Make message building and parser more modularized
Add core functionality for alerting and stats
    - build circular counter
    - build alert monitor using circular counter
    - rolling interval total traffic over x seconds
    - fixed interval request count per section
    - total bytes per ip address


Add unit tests
    -   Total traffic
    -   Total bytes
    -   Total traffic by user
    -   Section hit

Add java docs
Add shadowJar
Make it easier to run
Add readme



Improvements:
    Make monitor class more configurable ideally no longer need to write subclasses
    Add more monitoring metrics
    Use codegen for message codec and make fields optional
    Use mockito for unit tests
    Add retry on disconnect on the producer
    Add redundancy for the consumer with leader election
    Make backup consumers always in sync with the primary consumer
    Manage config files separately
	Manage the apps using kubernetes
	Could parse different log lines into different messages
	Introduce "sharding" when sending raw data to consumers now that fields are optional

Questions:
    -   Could you please expand on "make a reasonable assumption about how to handle the 10-second intervals"? Should I implement additional metrics based on what I assume might be interesting from a monitoring perspective?
    -   Regarding the stats for the 10-second interval and "don't just print them at the end", does it mean "don't print them at the end of parsing the entire file" or "don't print them at the end of each 10-second interval"? In other words, do we want to check and potentially print stats every 10 seconds, or is the 10-second interval a rolling window and we want to check and potentially print stats continuously based on certain thresholds we define?
    -   Could you please clarify what "+/- a second" means with regards to the recovering of the total traffic alert?

